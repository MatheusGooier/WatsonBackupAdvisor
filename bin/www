#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var http = require('http');
var https = require('https');
var console = require('console');

/**
 * Get port from environment and store in Express.
 */

 var port = normalizePort(process.env.PORT || '9345');
 var httpPort = normalizePort('3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
if (process.env.VCAP_APPLICATION) {
  var server = http.createServer(app);
} else {
  var fs = require('fs');
  var server = https.createServer({pfx: fs.readFileSync('./certs/local.pfx')}, app);

  var httpApp = require('express')();
  httpApp.use('*', function (req, res)
  {
    res.redirect("https://localhost:9345" + req.originalUrl)
  });

  var httpServer = http.createServer(httpApp);
  httpServer.listen(httpPort);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on http://localhost:'+httpPort);
  console.log('Listening on https://localhost:' + addr.port);
  console.log('To test the external app, try https://localhost:9345/poc_appops');
  // console.log('Listening on ' + bind);
}
